(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[328],{4078:(e,n,t)=>{Promise.resolve().then(t.bind(t,6215))},6215:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});var i=t(5155);t(2115);let s=[{category:"\uD83D\uDD22 Zahlen & Mathe",entries:[{lib:"math",desc:"Mathefunktionen (Wurzeln, Trigonometrie, Pi usw.)",methods:["sqrt() – Quadratwurzel berechnen","sin() – Sinus berechnen","cos() – Kosinus berechnen","pi – Mathematische Konstante π","log() – Logarithmus berechnen"]},{lib:"random",desc:"Zufallszahlen, Mischen von Listen, W\xfcrfeln",methods:["random() – Zufallszahl zwischen 0 und 1","randint() – Zuf\xe4llige Ganzzahl in Range","shuffle() – Liste zuf\xe4llig durchmischen","choice() – Zuf\xe4lliges Element w\xe4hlen"]},{lib:"decimal",desc:"Rechnen mit Dezimalzahlen, z. B. f\xfcr Geld",methods:["Decimal() – Erstelle Dezimalobjekt","getcontext() – Aktuellen Kontext abrufen","quantize() – Rundung/Pr\xe4zision setzen"]},{lib:"fractions",desc:"Bruchrechnung (z. B. 3/4 + 2/3)",methods:["Fraction() – Bruch erstellen","limit_denominator() – Nenner begrenzen"]},{lib:"statistics",desc:"Mittelwert, Median, Varianz usw.",methods:["mean() – Durchschnitt berechnen","median() – Medianwert berechnen","stdev() – Standardabweichung","variance() – Varianz berechnen"]}]},{category:"\uD83D\uDD52 Datum & Zeit",entries:[{lib:"datetime",desc:"Arbeiten mit Datum und Uhrzeit",methods:["datetime.now() – Aktuelles Datum/Zeit","timedelta() – Zeitspannen berechnen","strftime() – Datum formatieren"]},{lib:"time",desc:"Zeit messen, Sleep-Funktion usw.",methods:["sleep() – Warten f\xfcr Sekunden","time() – Aktuelle Zeit (Sekunden seit Epoch)","ctime() – Zeit in lesbarem Format"]},{lib:"calendar",desc:"Kalenderfunktionen",methods:["month() – Monatskalender anzeigen","calendar() – Jahreskalender generieren","isleap() – Schaltjahr pr\xfcfen"]}]},{category:"\uD83D\uDCC1 Dateien & Ordner",entries:[{lib:"os",desc:"Betriebssystemfunktionen, Pfade, Umgebungsvariablen",methods:["getcwd() – Aktuelles Verzeichnis","listdir() – Dateien im Verzeichnis","environ – Umgebungsvariablen","mkdir() – Neues Verzeichnis erstellen"]},{lib:"sys",desc:"Infos \xfcber das System, Zugriff auf CLI-Argumente",methods:["argv – Kommandozeilenargumente","exit() – Skript beenden","platform – Plattform-Info"]},{lib:"pathlib",desc:"Moderner Umgang mit Dateipfaden",methods:["Path() – Pfadobjekt erstellen","exists() – Existenz pr\xfcfen","is_file() – Ist Datei?","glob() – Dateien mit Muster finden"]},{lib:"shutil",desc:"Dateien/Ordner kopieren, verschieben, l\xf6schen",methods:["copy() – Datei kopieren","move() – Datei verschieben","rmtree() – Verzeichnis l\xf6schen"]},{lib:"glob",desc:"Dateien per Wildcard suchen (z. B. *.txt)",methods:["glob() – Liste aller Treffer","iglob() – Iterator \xfcber Treffer"]}]},{category:"\uD83D\uDCE6 Daten & Formate",entries:[{lib:"json",desc:"JSON laden/speichern",methods:["load() – JSON aus Datei","dump() – JSON in Datei","loads() – JSON aus String","dumps() – JSON als String"]},{lib:"csv",desc:"CSV-Dateien lesen/schreiben",methods:["reader() – CSV lesen","writer() – CSV schreiben","DictReader() – CSV als Dictionary lesen"]},{lib:"pickle",desc:"Python-Objekte serialisieren",methods:["dump() – Objekt in Datei speichern","load() – Objekt aus Datei laden","dumps() – Objekt als Bytes speichern"]},{lib:"sqlite3",desc:"Eingebaute SQL-Datenbank",methods:["connect() – Verbindung zur DB","cursor() – Cursor erzeugen","execute() – SQL ausf\xfchren"]},{lib:"configparser",desc:".ini-Dateien lesen/schreiben",methods:["read() – Konfig lesen","get() – Wert abfragen","sections() – Alle Bereiche holen","set() – Wert setzen"]}]},{category:"\uD83D\uDCEC Netzwerk & Web",entries:[{lib:"urllib",desc:"Webseiten aufrufen, Daten aus dem Netz ziehen",methods:["request.urlopen() – URL \xf6ffnen","parse.quote() – URL-Encoding","parse.urlencode() – Parameter kodieren"]},{lib:"http.server",desc:"Einfacher Webserver (lokal)",methods:["HTTPServer() – Server starten","BaseHTTPRequestHandler – Request-Handler definieren"]},{lib:"socket",desc:"Low-Level Netzwerkkommunikation",methods:["socket() – Socket erstellen","bind() – Adresse zuweisen","listen() – Auf Verbindungen warten","recv() – Daten empfangen"]}]},{category:"\uD83D\uDCC8 Debuggen & Logging",entries:[{lib:"logging",desc:"Logs schreiben (anstatt \xfcberall print())",methods:["debug() – Debug-Log schreiben","info() – Info-Log schreiben","warning() – Warnung loggen","basicConfig() – Logging konfigurieren"]},{lib:"traceback",desc:"Stacktraces anzeigen",methods:["print_exc() – Ausnahme anzeigen","format_exc() – Ausnahme als String"]},{lib:"pdb",desc:"Python-Debugger (Breakpoints etc.)",methods:["set_trace() – Breakpoint setzen","run() – Code mit Debugger ausf\xfchren"]}]},{category:"\uD83E\uDDEA Tests",entries:[{lib:"unittest",desc:"Test-Framework wie in Java/JUnit",methods:["TestCase – Testklasse definieren","assertEqual() – Werte vergleichen","setUp() – Vorbereitungen pro Test","run() – Tests ausf\xfchren"]},{lib:"doctest",desc:"Tests direkt in Docstrings",methods:["testmod() – Tests im Modul ausf\xfchren","run_docstring_examples() – Docstring-Beispiele pr\xfcfen"]}]},{category:"\uD83E\uDDF0 Sonstiges N\xfctzliches",entries:[{lib:"re",desc:"Regul\xe4re Ausdr\xfccke",methods:["search() – Nach Muster suchen","findall() – Alle Treffer finden","sub() – Ersetzen","match() – Start des Strings pr\xfcfen"]},{lib:"itertools",desc:"Fortgeschrittene Iteratoren & Kombis",methods:["product() – Kartesisches Produkt","permutations() – Alle Permutationen","cycle() – Endlos wiederholen","chain() – Iteratoren verbinden"]},{lib:"functools",desc:"Funktionen manipulieren (z. B. lru_cache)",methods:["lru_cache() – Caching aktivieren","partial() – Argumente vorausf\xfcllen","reduce() – Reduktion \xfcber Sequenz"]},{lib:"collections",desc:"Spezial-Datentypen (z. B. Counter, deque)",methods:["Counter() – Z\xe4hler f\xfcr Elemente","deque() – Doppelt verlinkte Liste","defaultdict() – Dict mit Defaultwert"]},{lib:"enum",desc:"Aufz\xe4hlungstypen",methods:["Enum() – Enum-Klasse erstellen","auto() – Automatische Werte"]},{lib:"typing",desc:"Typanmerkungen (z. B. List[str], Optional[int])",methods:["List – Liste mit Typ","Dict – Dictionary mit Typ","Optional – Optionaler Typ","Union – Mehrere Typen erlaubt"]}]}];function r(){return(0,i.jsxs)("div",{className:"python-libs",children:[(0,i.jsx)("h2",{children:"\uD83D\uDC0D Python Standardbibliothek (integrierte Libraries)"}),s.map((e,n)=>(0,i.jsxs)("div",{className:"category-group",children:[(0,i.jsx)("h3",{children:e.category}),(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Library"}),(0,i.jsx)("th",{children:"Beschreibung"}),(0,i.jsx)("th",{children:"Beispiele"})]})}),(0,i.jsx)("tbody",{children:e.entries.map((e,n)=>(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{className:"lib-name",children:e.lib}),(0,i.jsx)("td",{children:e.desc}),(0,i.jsx)("td",{className:"examples",children:e.methods.map((e,n)=>(0,i.jsx)("div",{children:e},n))})]},n))})]})]},n))]})}function a(){return(0,i.jsx)("div",{id:"toolsPage",children:(0,i.jsx)(r,{})})}}},e=>{var n=n=>e(e.s=n);e.O(0,[441,684,358],()=>n(4078)),_N_E=e.O()}]);