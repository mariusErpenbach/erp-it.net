[
    {
      "category": "🔢 Zahlen & Mathe",
      "entries": [
        {
          "lib": "System.Math",
          "desc": "Mathematische Funktionen wie Wurzeln, Trigonometrie, Logarithmen",
          "methods": [
            "Math.Sqrt() – Quadratwurzel",
            "Math.Sin() – Sinus",
            "Math.Cos() – Kosinus",
            "Math.PI – Mathematische Konstante π",
            "Math.Log() – Natürlicher Logarithmus"
          ]
        },
        {
          "lib": "System.Random",
          "desc": "Zufallszahlen erzeugen",
          "methods": [
            "Random.Next() – Ganzzahl in Range",
            "Random.NextDouble() – Zufallswert 0.0–1.0",
            "Random.NextBytes() – Byte-Array mit Zufallswerten"
          ]
        },
        {
          "lib": "System.Decimal",
          "desc": "Genaue Berechnungen mit Dezimalzahlen (z. B. für Finanzen)",
          "methods": [
            "decimal.Round() – Runden",
            "decimal.Add() – Addition",
            "decimal.Subtract() – Subtraktion"
          ]
        }
      ]
    },
    {
      "category": "🕒 Datum & Zeit",
      "entries": [
        {
          "lib": "System.DateTime",
          "desc": "Arbeiten mit Datum und Uhrzeit",
          "methods": [
            "DateTime.Now – Aktuelles Datum & Zeit",
            "DateTime.Today – Nur aktuelles Datum",
            "DateTime.AddDays() – Tage addieren",
            "DateTime.ToString() – Formatieren"
          ]
        },
        {
          "lib": "System.TimeSpan",
          "desc": "Zeitspannen berechnen",
          "methods": [
            "TimeSpan.FromMinutes() – Minuten erzeugen",
            "TimeSpan.TotalSeconds – Gesamtdauer in Sekunden",
            "DateTime.Subtract() – Differenz als TimeSpan"
          ]
        },
        {
          "lib": "System.Threading.Thread",
          "desc": "Warten, Verzögern",
          "methods": [
            "Thread.Sleep() – Pausiert aktuellen Thread"
          ]
        }
      ]
    },
    {
      "category": "📁 Dateien & Ordner",
      "entries": [
        {
          "lib": "System.IO.File",
          "desc": "Arbeiten mit Dateien",
          "methods": [
            "File.ReadAllText() – Textdatei lesen",
            "File.WriteAllText() – Textdatei schreiben",
            "File.Exists() – Prüfen, ob Datei existiert"
          ]
        },
        {
          "lib": "System.IO.Directory",
          "desc": "Verzeichnisse verwalten",
          "methods": [
            "Directory.GetFiles() – Dateien abrufen",
            "Directory.CreateDirectory() – Ordner erstellen",
            "Directory.Exists() – Existenz prüfen"
          ]
        },
        {
          "lib": "System.IO.Path",
          "desc": "Pfadoperationen",
          "methods": [
            "Path.Combine() – Pfade zusammensetzen",
            "Path.GetExtension() – Dateierweiterung",
            "Path.GetFileName() – Dateiname extrahieren"
          ]
        }
      ]
    },
    {
      "category": "📦 Daten & Formate",
      "entries": [
        {
          "lib": "System.Text.Json",
          "desc": "Arbeiten mit JSON",
          "methods": [
            "JsonSerializer.Serialize() – Objekt zu JSON",
            "JsonSerializer.Deserialize() – JSON zu Objekt"
          ]
        },
        {
          "lib": "System.Xml",
          "desc": "XML-Dokumente verarbeiten",
          "methods": [
            "XmlDocument.Load() – XML laden",
            "XmlDocument.SelectSingleNode() – Knoten abfragen"
          ]
        }
      ]
    },
    {
      "category": "⚙️ Komponenten & Events",
      "entries": [
        {
          "lib": "System.ComponentModel",
          "desc": "Benachrichtigungen, PropertyChanged, Binding Support",
          "methods": [
            "INotifyPropertyChanged – Änderungserkennung in Properties",
            "PropertyChangedEventHandler – Event-Handler für Änderungen"
          ]
        }
      ]
    },
    {
      "category": "🔄 Asynchrone Aufgaben & Tasks",
      "entries": [
        {
          "lib": "System.Threading.Tasks",
          "desc": "Tasks und asynchrone Programmierung",
          "methods": [
            "Task.Run() – Task starten",
            "await Task.Delay() – Asynchron warten",
            "Task.WhenAll() – Mehrere Tasks gleichzeitig"
          ]
        }
      ]
    },
    {
      "category": "📬 Netzwerk & Web",
      "entries": [
        {
          "lib": "System.Net.Http.HttpClient",
          "desc": "HTTP-Requests senden",
          "methods": [
            "HttpClient.GetAsync() – GET-Request",
            "HttpClient.PostAsync() – POST-Request",
            "HttpClient.SendAsync() – Manuelle Anfrage"
          ]
        },
        {
          "lib": "System.Net.WebClient",
          "desc": "Einfacher Web-Zugriff (veraltet, aber nützlich)",
          "methods": [
            "DownloadString() – HTML/Text laden",
            "UploadString() – Daten senden"
          ]
        }
      ]
    },
    {
      "category": "📈 Debugging & Logging",
      "entries": [
        {
          "lib": "System.Diagnostics.Debug",
          "desc": "Debug-Ausgaben zur Entwicklungszeit",
          "methods": [
            "Debug.WriteLine() – In Output-Fenster schreiben",
            "Debug.Assert() – Bedingung prüfen"
          ]
        },
        {
          "lib": "System.Diagnostics.Trace",
          "desc": "Logging auch im Release-Modus",
          "methods": [
            "Trace.WriteLine() – Log schreiben",
            "Trace.Fail() – Fehler melden"
          ]
        }
      ]
    },
    {
      "category": "🧪 Reflektion & Meta",
      "entries": [
        {
          "lib": "System.Reflection",
          "desc": "Typen, Methoden und Eigenschaften zur Laufzeit inspizieren",
          "methods": [
            "Assembly.GetExecutingAssembly() – Aktuelle Assembly",
            "Type.GetProperties() – Eigenschaften abrufen",
            "MethodInfo.Invoke() – Methode aufrufen"
          ]
        }
      ]
    },
    {
      "category": "🧠 Systemumgebung & Infos",
      "entries": [
        {
          "lib": "System.Environment",
          "desc": "Informationen über das System & Umgebungsvariablen",
          "methods": [
            "Environment.MachineName – Computername",
            "Environment.OSVersion – Betriebssystem",
            "Environment.GetEnvironmentVariable() – Umgebungsvariable lesen",
            "Environment.CurrentDirectory – Aktuelles Arbeitsverzeichnis"
          ]
        }
      ]
    },
    {
      "category": "🔐 Sicherheit & Hashing",
      "entries": [
        {
          "lib": "System.Security.Cryptography",
          "desc": "Verschlüsselung, Hashing und sichere Zufallszahlen",
          "methods": [
            "SHA256.Create() – SHA256 Hashing",
            "MD5.Create() – MD5 Hashing (veraltet)",
            "RandomNumberGenerator.GetBytes() – Kryptografischer Zufall"
          ]
        }
      ]
    },
    {
      "category": "🧰 Sonstiges Nützliches",
      "entries": [
        {
          "lib": "System.Text.RegularExpressions.Regex",
          "desc": "Reguläre Ausdrücke",
          "methods": [
            "Regex.Match() – Erstes Match",
            "Regex.Matches() – Alle Treffer",
            "Regex.Replace() – Ersetzen"
          ]
        },
        {
          "lib": "System.Linq",
          "desc": "Erweiterungen für Listen, Filter, Maps",
          "methods": [
            "Where() – Filtern",
            "Select() – Umwandeln",
            "Any() – Existenz prüfen",
            "ToList() – In Liste konvertieren"
          ]
        },
        {
          "lib": "System.Collections.Generic",
          "desc": "Allgemeine Datentypen",
          "methods": [
            "List<T> – Dynamische Liste",
            "Dictionary<K,V> – Schlüssel/Wert Paare",
            "Queue<T> – FIFO",
            "Stack<T> – LIFO"
          ]
        }
      ]
    }, {
        "category": "🧙 Avalonia UI Basics",
        "entries": [
          {
            "lib": "Avalonia.Controls",
            "desc": "Alle grundlegenden UI-Elemente wie Button, TextBox, StackPanel, Grid etc.",
            "methods": [
              "Button – Klickbare Schaltfläche",
              "TextBox – Eingabefeld",
              "StackPanel – Vertikale/Horizontale Anordnung",
              "Grid – Rasterbasierte Layoutsteuerung"
            ]
          },
          {
            "lib": "Avalonia.Markup.Xaml",
            "desc": "Ermöglicht das Laden und Parsen von .xaml-Dateien",
            "methods": [
              "AvaloniaXamlLoader.Load() – XAML laden",
              "x:Class – Code-Behind Verknüpfung"
            ]
          },
          {
            "lib": "Avalonia.Layout",
            "desc": "Enums und Logik für Layout-Orientierungen",
            "methods": [
              "Orientation.Vertical / Horizontal – Ausrichtung",
              "Dock – Positionierung in DockPanels",
              "HorizontalAlignment / VerticalAlignment – Ausrichtung"
            ]
          },
          {
            "lib": "Avalonia.Styling",
            "desc": "Styling von Controls, ähnlich wie CSS",
            "methods": [
              ":hover, :pressed – Pseudostates",
              "Setter – Eigenschaft setzen",
              "Styles – Sammlung von Settern"
            ]
          },
          {
            "lib": "Avalonia.Media",
            "desc": "Grafik, Farben, Brushes",
            "methods": [
              "Brushes.Red – Vordefinierte Farben",
              "SolidColorBrush – Feste Farbe",
              "LinearGradientBrush – Farbverläufe"
            ]
          },
          {
            "lib": "Avalonia.Data",
            "desc": "Datenbindungssystem, sehr ähnlich zu WPF",
            "methods": [
              "Binding – Bindung zu Property",
              "INotifyPropertyChanged – Änderungen erkennen",
              "TwoWay, OneWay – Bindungsrichtung"
            ]
          },
          {
            "lib": "Avalonia.Input",
            "desc": "Tastatur, Maus, Fokus",
            "methods": [
              "KeyDown – Tastendruck",
              "PointerPressed – Mausaktionen",
              "FocusManager – Fokussteuerung"
            ]
          },
          {
            "lib": "Avalonia.Interactivity",
            "desc": "Event-Routing-System wie in WPF",
            "methods": [
              "RoutedEvent – Registrieren und auslösen von Events",
              "RaiseEvent() – Event auslösen"
            ]
          }
        ]
      },
      {
        "category": "🛠️ Erweiterte Avalonia UI Bibliotheken",
        "entries": [
          {
            "lib": "CommunityToolkit.Mvvm",
            "desc": "Microsoft’s modernes MVVM Toolkit: ObservableObject, RelayCommand, INotifyPropertyChanged Boilerplate ade!",
            "methods": [
              "ObservableObject – Basis-Klasse für Bindings",
              "RelayCommand – Einfaches Command-Pattern",
              "INotifyPropertyChanged – Für Bindungen"
            ]
          },
          {
            "lib": "Avalonia.Dialogs",
            "desc": "Erweiterte Dialog-Funktionen wie FileOpenDialog, ColorPicker etc.",
            "methods": [
              "OpenFileDialog() – Datei öffnen",
              "SaveFileDialog() – Datei speichern",
              "ColorPicker() – Farbwahl"
            ]
          },
          {
            "lib": "Avalonia.ReactiveUI",
            "desc": "Integration mit ReactiveUI – für reaktives MVVM mit Observables und State-Streams.",
            "methods": [
              "ReactiveObject – Basis für reaktive Bindungen",
              "ReactiveCommand – Reaktive Commands",
              "WhenAnyValue() – Beobachtet Werte"
            ]
          },
          {
            "lib": "Avalonia.Svg",
            "desc": "Anzeige und Verarbeitung von SVG-Dateien in Avalonia UI.",
            "methods": [
              "SvgImageSource – SVG-Bildquelle",
              "SvgParser – SVG-Datei parsen",
              "SvgElement – SVG-Element anzeigen"
            ]
          },
          {
            "lib": "Avalonia.FuncUI",
            "desc": "Funktionaler Ansatz zur UI-Entwicklung mit Avalonia (F# basiert).",
            "methods": [
              "Program – Definiert das Hauptprogramm",
              "Component – Definiert UI-Komponenten",
              "Render – Rendern von UI"
            ]
          },
          {
            "lib": "Avalonia.Diagnostics",
            "desc": "Debugging-Tools zur Laufzeit, z. B. Live-Tree-Inspector und Style-Viewer.",
            "methods": [
              "TreeInspector – UI-Struktur untersuchen",
              "StyleViewer – Stile während der Laufzeit ansehen"
            ]
          },
          {
            "lib": "AvaloniaEdit",
            "desc": "Code-Editor-Komponente, basiert auf ICSharpCode.AvalonEdit.",
            "methods": [
              "TextEditor – Texteditor für Quellcode",
              "Highlighting – Syntax-Highlighting",
              "AutoComplete – Automatische Vervollständigung"
            ]
          },
          {
            "lib": "Avalonia.Labs",
            "desc": "Experimentelle Controls und neue UI-Komponenten, z. B. TabControl2, InfoBar.",
            "methods": [
              "TabControl2 – Erweiterte Tab-Steuerung",
              "InfoBar – Benachrichtigungsleiste",
              "Expander – Erweitern von Inhalten"
            ]
          },
          {
            "lib": "FluentAvalonia",
            "desc": "UI-Komponenten im Fluent Design (ähnlich Windows 11).",
            "methods": [
              "FluentButton – Fluent Design Button",
              "FluentTextBox – Fluent Design TextBox",
              "FluentDialog – Fluent Design Dialog"
            ]
          }
        ]
      }
  ]